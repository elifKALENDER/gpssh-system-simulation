{\rtf1\ansi \deff4\deflang1033{\fonttbl{\f1\froman\fcharset2\fprq2 Symbol;}{\f4\froman\fcharset0\fprq2 Times New Roman;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;
\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;
\red192\green192\blue192;}{\stylesheet{\widctlpar \f4\fs20 \snext0 Normal;}{\*\cs10 \additive Default Paragraph Font;}}{\info{\author Elizabeth Tucker}{\operator Elizabeth Tucker}{\creatim\yr1999\mo8\dy6\hr11\min11}{\revtim\yr1999\mo8\dy6\hr11\min12}
{\version2}{\edmins1}{\nofpages1}{\nofwords115}{\nofchars658}{\*\company Wolverine Software}{\vern57443}}\widowctrl\ftnbj\aenddoc\hyphcaps0 \fet0\sectd \linex0 {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2
\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6
\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}\pard\plain \nowidctlpar \f4\fs20 {\cf9 
\par }\pard \qc\nowidctlpar {\fs32\cf9 
\par }{\b\fs32\cf9 Concurrent / Real-Time P4
\par }{\fs32\cf9 
\par }\pard \nowidctlpar {\fs28\cf9 
P4 is available as a Windows Dynamic Link Library (DLL).  Functions in the DLL version of P4 can be called directly from another application, making it possible to do simulation and animation concurrently or even in real time.
\par 
\par The DLL interface was designed for simplicity and ease-of-use.  Any language that can construct calls to a DLL can be used to drive the P4 DLL.  We've built a special interface for our SLX simulation language that hides DLL details, making it }{
\i\fs28\cf9 extremely}{\fs28\cf9  easy to do concurrent animation with SLX.
\par 
\par Library functions include the following:
\par 
\par {\pntext\pard\plain\f1\fs28\cf9 \'b7\tab}}\pard \fi-360\li720\nowidctlpar{\*\pn \pnlvlblt\pnf1 {\pntxtb \'b7}}{\fs28\cf9 ProofOpenLayout - Open a layout file.
\par }\pard \nowidctlpar {\fs28\cf9 
\par {\pntext\pard\plain\f1\fs28\cf9 \'b7\tab}}\pard \fi-360\li720\nowidctlpar{\*\pn \pnlvlblt\pnf1 {\pntxtb \'b7}}{\fs28\cf9 ProofSendTraceLine - Send a trace command to P4.
\par }\pard \nowidctlpar {\fs28\cf9 
\par {\pntext\pard\plain\f1\fs28\cf9 \'b7\tab}}\pard \fi-360\li720\nowidctlpar{\*\pn \pnlvlblt\pnf1 {\pntxtb \'b7}}{\fs28\cf9 ProofSuspend - Suspend P4 and take control of the screen.
\par }\pard \nowidctlpar {\fs28\cf9 
\par {\pntext\pard\plain\f1\fs28\cf9 \'b7\tab}}\pard \fi-360\li720\nowidctlpar{\*\pn \pnlvlblt\pnf1 {\pntxtb \'b7}}{\fs28\cf9 ProofResume - Yield control of the screen back to P4.
\par }\pard \nowidctlpar {\fs28\cf9 
\par }}